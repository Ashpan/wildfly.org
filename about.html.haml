---
layout: project
title: About
---

.row-fluid
  .row-fluid
    .hero-unit
      %h1 What is WildFly?
      %p 
        WildFly is a flexible, lightweight, managed application runtime that helps you build 
        %strong
          %em amazing
        applications.
  .row-fluid 
    .well.post-bg
      .row-fluid
        %h3
          %img.pull-left{:src=>"#{site.base_url}/images/wildfly-icons-bolt_45px.png"}
          Unparalleled Speed
      .row-fluid
        .span6
          %h4 Fast Startup
          %p Experience ground breaking startup speed!
          %p In the highly optimized boot process of WildFly 8, services are started concurrently to eliminate unnecessary waits and to tap into the power of multi-core processors. Non-critical services are kept on ice until first use.
          %p As a result, WildFly offers a 10-fold reduction in startup time over previous versions and even gives Jetty and Tomcat a run for their money.
        .span6
          %h4 Ultimate Web Performance &amp; Scalability 
          %p
            Connectivity, responsiveness, and the ability to scale are of the utmost importance for modern web applications. To meet these demands we have developed a new flexible high performance web server, called 
            %a{:href=>"http://undertow.io"} Undertow
            , and it's an integral part of WildFly 8. Undertow has the ability to scale to over a million connections, and third party benchmarks have shown it besting the competition when it comes to throughput.
      .row-fluid
        %p
      .row-fluid
        %h3 
          %img.pull-left{:src=>"#{site.base_url}/images/wildfly-icons-feather_45px.png"}
          Exceptionally Lightweight
      .row-fluid
        .span6
          %h4 Memory Diet
          %p WildFly takes an aggressive approach to memory management. The base runtime services were developed to minimize heap allocation. These services use common cached indexed metadata over duplicate full parses, which reduces heap and object churn. The use of modular class loading prevents duplicate classes and loading more than the system configuration requires. This not only reduces the base memory overhead but also helps to minimize garbage collector pauses. Finally the administration console is 100% stateless and purely client driven. It starts instantly and requires zero memory on the server.

          %p These optimizations combined enable WildFly to run with stock JVM settings and also on small devices. It also leaves more headroom for application data and supports higher scalability.
        .span6
          %h4 Slimable /  Customizable Runtime
          %p WildFly's architecture is based on pluggable subsystems that can be added or removed as needed. This allows you to remove capabilities you dont need, and also reduce the overall disk footprint and memory overhead required by the server. 
          %p This is all controlled by configuration which is arranged into subsystem blocks. To remove a subsystem you simply need to delete that simple block of configuration. For example, if you decide you only want Servlet support, you can delete every subsystem but the "undertow" subsystem.
      .row-fluid
        %p
      .row-fluid
        %h3 
          %img.pull-left{:src=>"#{site.base_url}/images/wildfly-icons-admin_45px.png"}
          Powerful Administration
      .row-fluid
        .span6
          %h4 Unified configuration &amp; Management
          %p Rather than sending you on a wild goose chase to change a setting in the application server, configuration in WildFly is centralized, simple and user-focused. The configuration file is organized by subsystems that you can easily comprehend and no internal server wiring is exposed. Subsystems use intelligent defaults, but can still be customized to best fit your needs. If you are running in domain mode, the configuration for all servers participating in the domain is specified in a well-organized manner within the same file. 
          %p Configuration changes aren't limited to file edits. All management capabilities are exposed in a unified manner across many forms of access. These include a CLI, a web based administration console, a native Java API, an HTTP/JSON based REST API, and a JMX gateway. These options allow for custom automation using the tools and languages that best fit your needs.
        .span6
          %h4 Domain & Standalone Management
          %p WildFly offers two modes: a traditional, single JVM, standalone mode, and a multi-JVM option, domain mode, which synchronizes configuration across any number of processes and hosts.
          %p All of the management capabilities previously described are available in both modes. However domain mode adds a central control point, the domain controller, for all of your systems.
          %p Unlike solutions from other products, domain mode was designed to consume minimal resources, and in the case of failure to not impact running applications. Also, if you have a large domain, you can directly query each individual host for runtime metrics, which prevents the domain controller from becoming a bottleneck.
      .row-fluid
        %p
      .row-fluid
        %h3 
          %img.pull-left{:src=>"#{site.base_url}/images/wildfly-icons-compliant_45px.png"}
          Supports Latest Standards and Technology
      .row-fluid
        .span6
          %h4 Java EE 8
          %p WildFly implements the latest in enterprise Java standards. Java EE8 improves developer productity by providing rich enterprise capabilities in easy to consume frameworks that eliminate boiler plate and reduce technical burden. This allows your team to focus on the core business needs of your application. 
          %p In addition the frameworks that compose Java EE are heavily tested in combination. Using these standards means you no longer have to worry about finding the magic combination of various frameworks (and versions) that happen to work together.
          %p Finally, building your application on standards allows you the flexibility to migrate between various vendor solutions.  If you have applications using these standards on another, perhaps proprietary server, migrating to WildFly could breathe some fresh air into those applications.
        .span6
          %h4 Modern Web
          %p WildFly supports the latest standards for web development. Web Socket support allows your applications the ability to use optimized custom protocols and full-duplex communication with your backend infrastructure. This is particular useful in communicating with mobile devices.
          %p As web applications have evolved to become more client oriented with rich dynamic JavaScript, data access over the web has become critical. WildFly supports the latest standards for REST based data access, including JAX-RS 2, and JSON-P. 
          %p The connectivity and responsiveness needs of modern web applications are greater than ever. While WildFly will optimize traditional blocking I/O applications, it also provides asynchrous and non-blocking APIs that allow you to maximize the performance of critical resources in your application.
          %p Lastly, fault tolerance, clustering, session replication, and efficient web proxying are all baked into WildFly as base level features.
      .row-fluid
        %p
      .row-fluid
        %h3 
          %img.pull-left{:src=>"#{site.base_url}/images/wildfly-icons-plugin_45px.png"}
          Modular Java
      .row-fluid
        .span6
          %h4 No more jar hell!
          %p Hierarchical classloaders are problematic, often causing failed deployments and quirky behavior. The time has come to say goodbye to the parent delegation model and find the path to modularity (i.e. sane classloading).
          %p WildFly does classloading right. It uses JBoss Modules to provide true application isolation, hiding server implementation classes from the application and only linking with JARs your application needs. Modules, packaged as collections of classes, are peers that remain isolated unless explicitly defined as a dependency of another module. Visibility rules have sensible defaults, yet can be customized.
        .span6
          %h4 Fast Linking & Concurrent Loading
          %p The dependency resolution algorithm in JBoss Modules is O(1), which means that classloading performance is not affected by the number of versions of libraries you have installed.
          %p Classes are loaded concurrently, allowing for quick class discovery and loading, even on large deployments.
      .row-fluid
        %p
      .row-fluid
        %h3 
          %img.pull-left{:src=>"#{site.base_url}/images/wildfly-icons-testable_45px.png"}
          Easily Testable
      .row-fluid
        .span6
          %h4 Arquillian
          %p
            From the very start, WildFly has been designed with testability in mind. The secret to that fidelity is
            %a{:href=>"http://www.arquillian.org"} Arquillian
            , a component model for integration tests that execute inside the real runtime environment.
          %p  By removing the clutter from your tests and handling deployment and test execution, Arquillian enables you to write tests for just about any use case your application encounters: real tests.
          %p Thanks to the speed of WildFly, Arquillian tests run nearly as fast as unit tests.
        .span6
          %h4 Smarter Development
          %p The quick boot of WildFly combined with the easy-to-use Arquillian framework allows for test driven development using the real environment your code will be running in. You no longer need to pollute your application object model with mock classes and test code. Your test code is separate and simply deployed along side your application where it has full access to server resources.
      .row-fluid
        %p
      .row-fluid
        %h3 
          %img.pull-left{:src=>"#{site.base_url}/images/wildfly-icons-bestof_45px.png"}
          Based on the Best of Open Source
      .row-fluid
        .span6
          %p WildFly builds on many best of breed standalone OSS projects, many of which you're likely to recognize:
      .row-fluid
        .span6
          %ul.list-with-icons
            %li
              / Problem with row-fluid redefining min-height, only workaround I could find was setting in style
              %i.project-icon-med.hibernate_icon_16x{:style=>"width: 16px; min-height: 16px; height: 16px;"}
              %a.middle{:href=>"http://www.hibernate.org"}
                Hibernate
            %li
              %i.project-icon-med.narayana_icon_16x{:style=>"width: 16px; min-height: 16px; height: 16px;"}
              %a.middle{ :href=>"http://www.jboss.org/jbosstm"}
                Narayana
            %li
              %i.project-icon-med.infinispan_icon_16x{:style=>"width: 16px; min-height: 16px; height: 16px;"}
              %a.middle{ :href=>"http://www.jboss.org/infinispan"}
                Infinispan
            %li
              %i.project-icon-med.ironjacamar_icon_16x{:style=>"width: 16px; min-height: 16px; height: 16px;"}
              %a.middle{ :href=>"http://www.jboss.org/ironjacamar"}
                IronJacamar
            %li
              %i.project-icon-med.resteasy_icon_16x{:style=>"width: 16px; min-height: 16px; height: 16px;"}
              %a.middle{ :href=>"http://www.jboss.org/resteasy"}
                RESTEasy
            %li
              %i.project-icon-med.weld_icon_16x{:style=>"width: 16px; min-height: 16px; height: 16px;"}
              %a.middle{ :href=>"http://weld.cdi-spec.org"}
                Weld
        .span6
          %ul.list-with-icons
            %li
              %i.project-icon-med.hornetQ_icon_16x{:style=>"width: 16px; min-height: 16px; height: 16px;"}
              %a.middle{ :href=>"http://www.jboss.org/hornetq"}
                HornetQ
            %li
              %i.project-icon-med.jgroups_icon_16x{:style=>"width: 16px; min-height: 16px; height: 16px;"}
              %a.middle{ :href=>"http://www.jboss.org/jgroups"}
                JGroups
            %li
              %i.project-icon-med{:style=>"width: 16px; min-height: 16px; height: 16px;"}
              %a.middle{ :href=>"http://java.net/projects/mojarra/"}
                Mojarra
            %li
              %i.project-icon-med{:style=>"width: 16px; min-height: 16px; height: 16px;"}
              %a.middle{ :href=>"http://cxf.apache.org/"}
                Apache CXF
            %li
              %i.project-icon-med.arquillian_icon_16x{:style=>"width: 16px; min-height: 16px; height: 16px;"}
              %a.middle{ :href=>"http://www.arquillian.org"}
                Arquillian
            %li
              %div.pull-left{:style=>"width: 21px; height: 16px;"}
              And more ...
